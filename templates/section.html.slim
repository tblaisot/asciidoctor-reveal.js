/ OPTIONS PROCESSING
/ hide slides on %conceal, %notitle and named "!"
- titleless = (title = self.title) == '!'
- hide_title = (titleless || (option? :notitle) || (option? :conceal))

- sub_slides = find_by(context: :section) {|section| section.level == @level+1 and not section.option? :noslide}

/ extracting block image attributes to find an image to use as a
/ background_image attribute
- data_background_image, data_background_size, data_background_repeat,
  data_background_transition = nil

/ process the first image block in the current section that acts as a background
- section_images = blocks.map do |block|
  - if (ctx = block.context) == :image
    - ['background', 'canvas'].include?(block.attributes[1]) ? block : []
  - elsif ctx == :section
    - []
  - else
    - block.find_by(context: :image) {|image| ['background', 'canvas'].include?(image.attributes[1]) } || []
- if (bg_image = section_images.flatten.first)
  - data_background_image = image_uri(bg_image.attr 'target')
  / make sure no crash on nil and default values make sense
  - data_background_size = bg_image.attr 'size'
  - data_background_repeat = bg_image.attr 'repeat'
  - data_background_transition = bg_image.attr 'transition'

/ background-image section attribute overrides the image one
- if attr? 'background-image'
  - data_background_image = image_uri(attr 'background-image')

- if attr? 'background-color'
  - data_background_color = attr 'background-color'

/ RENDERING
/ render normal title without a slide
- if option? :noslide
  h(
    level=(@level)
    class=roles)
    =title
  =content.chomp

/ render a slide for each title
- else
  section(
    id=(titleless ? nil : id)
    class=roles
    data-transition=(attr 'transition')
    data-transition-speed=(attr 'transition-speed')
    data-background-color=data_background_color
    data-background-image=data_background_image
    data-background-size=(data_background_size || attr('background-size'))
    data-background-repeat=(data_background_repeat || attr('background-repeat'))
    data-background-transition=(data_background_transition || attr('background-transition'))
    data-background-iframe=(attr "background-iframe")
    data-background-video=(attr "background-video")
    data-background-video-loop=((attr? 'background-video-loop') || (option? 'loop'))
    data-background-video-muted=((attr? 'background-video-muted') || (option? 'muted'))
    data-state=(attr 'state'))

    / title unless hide title option
    - unless hide_title
      - if @document.attr? :repeat_titles
        - if @level == 2
          h(
            class=['parent-title',parent.roles]
            level=(@parent.level))
            =parent.title
        - if @level == 3
          h(
            class=['grand-parent-title',parent.parent.roles]
            level=(@parent.parent.level))
            =parent.parent.title
          h(
            class=['parent-title',parent.roles]
            level=(@parent.level))
            =parent.title
        h(
          level=(@level)
          class=roles)
          =title


    / convert childs blocs not being slides
    - if !sub_slides.empty?
      - (blocks - sub_slides).each do |block|
        =block.convert

    / Render content of the slide
    - else
      =content.chomp

  / render child title as brother slides
  - if !sub_slides.empty?
    - sub_slides.each do |subsection|
      =subsection.convert
